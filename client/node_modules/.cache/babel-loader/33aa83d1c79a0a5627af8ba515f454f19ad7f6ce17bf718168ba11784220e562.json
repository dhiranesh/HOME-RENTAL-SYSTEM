{"ast":null,"code":"import React,{createContext,useState,useEffect,useCallback,useContext}from'react';// Added useContext\nimport{useNavigate}from'react-router-dom';// Optional: for programmatic navigation on logout\nimport*as api from'../api/auth';// Assuming your API functions are here\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);// Custom hook to use the AuthContext\nexport const useAuth=()=>{return useContext(AuthContext);};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(localStorage.getItem('token'));const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);const navigate=useNavigate();// Optional\nconst fetchCurrentUser=useCallback(async currentToken=>{if(currentToken){try{// Optional: If you have an endpoint to verify token and get user\n// const currentUser = await api.getCurrentUserProfile(currentToken); // You'd need to create this API call\n// For now, we'll assume token presence means basic auth until backend validation\n// If you decode the token on the client, do it carefully and be aware of security.\n// For simplicity, we'll just set a placeholder user if token exists.\n// In a real app, you'd fetch user details from a protected '/me' endpoint.\n// For this example, let's assume if a token exists, we try to parse it (not recommended for sensitive data)\n// or better, have a dedicated endpoint.\n// For now, if token exists, we'll just mark as authenticated and try to get user info later or upon login.\n// This part needs a proper backend endpoint to be secure and reliable.\n// For now, let's just say if there's a token, we assume they *were* logged in.\n// A better approach is to have a `getCurrentUser` function in `api/auth.js`\n// that makes a request to a protected `/api/auth/me` endpoint.\n// Placeholder: If you had a getCurrentUser function in api/auth.js\n// const { user: fetchedUser } = await api.getCurrentUser();\n// setUser(fetchedUser);\n// setIsAuthenticated(true);\n// Simplified: If token exists, assume authenticated for now.\n// Real user data should be fetched on login or from a /me endpoint.\nsetIsAuthenticated(true);// setUser({ name: \"User from token\" }); // Placeholder, get real user data\n}catch(error){console.error(\"Failed to fetch current user or token invalid\",error);localStorage.removeItem('token');setToken(null);setUser(null);setIsAuthenticated(false);}}setIsLoading(false);},[]);useEffect(()=>{const storedToken=localStorage.getItem('token');if(storedToken){setToken(storedToken);// setIsAuthenticated(true); // Basic check, better to verify token with backend\nfetchCurrentUser(storedToken);}else{setIsLoading(false);}},[fetchCurrentUser]);const login=async credentials=>{try{const data=await api.loginUser(credentials);// api.loginUser should store token in localStorage\nsetUser(data.user);// Assuming API returns { token, user }\nsetToken(data.token);setIsAuthenticated(true);localStorage.setItem('token',data.token);// Ensure token is set\nreturn data;}catch(error){console.error(\"Login failed:\",error);throw error;}};const register=async userData=>{try{const data=await api.registerUser(userData);// api.registerUser might also store token and log in\n// Decide if registration should automatically log in the user\nif(data.token&&data.user){setUser(data.user);setToken(data.token);setIsAuthenticated(true);localStorage.setItem('token',data.token);}return data;}catch(error){console.error(\"Registration failed:\",error);throw error;}};const logout=()=>{api.logoutUser();// Clears token from localStorage\nsetUser(null);setToken(null);setIsAuthenticated(false);// navigate('/login'); // Optional: redirect to login page\n};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,token,isAuthenticated,isLoading,login,register,logout,setUser,setIsAuthenticated},children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","useNavigate","api","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","navigate","fetchCurrentUser","currentToken","error","console","removeItem","storedToken","login","credentials","data","loginUser","setItem","register","userData","registerUser","logout","logoutUser","Provider","value"],"sources":["C:/Users/dhira/OneDrive/Desktop/other/final house rental website/home-rental-app/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback, useContext } from 'react'; // Added useContext\r\nimport { useNavigate } from 'react-router-dom'; // Optional: for programmatic navigation on logout\r\nimport * as api from '../api/auth'; // Assuming your API functions are here\r\n\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate(); // Optional\r\n\r\n  const fetchCurrentUser = useCallback(async (currentToken) => {\r\n    if (currentToken) {\r\n      try {\r\n        // Optional: If you have an endpoint to verify token and get user\r\n        // const currentUser = await api.getCurrentUserProfile(currentToken); // You'd need to create this API call\r\n        // For now, we'll assume token presence means basic auth until backend validation\r\n        // If you decode the token on the client, do it carefully and be aware of security.\r\n        // For simplicity, we'll just set a placeholder user if token exists.\r\n        // In a real app, you'd fetch user details from a protected '/me' endpoint.\r\n        // For this example, let's assume if a token exists, we try to parse it (not recommended for sensitive data)\r\n        // or better, have a dedicated endpoint.\r\n        // For now, if token exists, we'll just mark as authenticated and try to get user info later or upon login.\r\n        // This part needs a proper backend endpoint to be secure and reliable.\r\n        // For now, let's just say if there's a token, we assume they *were* logged in.\r\n        // A better approach is to have a `getCurrentUser` function in `api/auth.js`\r\n        // that makes a request to a protected `/api/auth/me` endpoint.\r\n\r\n        // Placeholder: If you had a getCurrentUser function in api/auth.js\r\n        // const { user: fetchedUser } = await api.getCurrentUser();\r\n        // setUser(fetchedUser);\r\n        // setIsAuthenticated(true);\r\n\r\n        // Simplified: If token exists, assume authenticated for now.\r\n        // Real user data should be fetched on login or from a /me endpoint.\r\n        setIsAuthenticated(true);\r\n        // setUser({ name: \"User from token\" }); // Placeholder, get real user data\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch current user or token invalid\", error);\r\n        localStorage.removeItem('token');\r\n        setToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n      // setIsAuthenticated(true); // Basic check, better to verify token with backend\r\n      fetchCurrentUser(storedToken);\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [fetchCurrentUser]);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const data = await api.loginUser(credentials); // api.loginUser should store token in localStorage\r\n      setUser(data.user); // Assuming API returns { token, user }\r\n      setToken(data.token);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('token', data.token); // Ensure token is set\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const data = await api.registerUser(userData); // api.registerUser might also store token and log in\r\n       // Decide if registration should automatically log in the user\r\n      if (data.token && data.user) {\r\n        setUser(data.user);\r\n        setToken(data.token);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('token', data.token);\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Registration failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    api.logoutUser(); // Clears token from localStorage\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    // navigate('/login'); // Optional: redirect to login page\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, isAuthenticated, isLoading, login, register, logout, setUser, setIsAuthenticated }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}