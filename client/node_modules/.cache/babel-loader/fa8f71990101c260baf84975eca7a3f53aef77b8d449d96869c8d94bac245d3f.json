{"ast":null,"code":"import axios from 'axios';\n\n// Define the base URL for your API. This might come from an environment variable.\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/auth'; // Adjust port if your backend runs elsewhere\n\n/**\r\n * Registers a new user.\r\n * @param {object} userData - The user's registration data (e.g., name, email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    // If registration is successful, the backend might return user data and a token.\n    // You might want to store the token in localStorage here or in AuthContext.\n    if (response.data && response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  } catch (error) {\n    // Handle errors (e.g., display a message to the user)\n    // Axios wraps the error response in error.response\n    throw error.response ? error.response.data : new Error('Registration failed');\n  }\n};\n\n/**\r\n * Logs in an existing user.\r\n * @param {object} credentials - The user's login credentials (e.g., email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, credentials);\n    // If login is successful, the backend will likely return user data and a token.\n    // Store the token in localStorage for subsequent authenticated requests.\n    if (response.data && response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error('Login failed');\n  }\n};\n\n/**\r\n * Logs out the current user.\r\n * This typically involves removing the token from local storage.\r\n */\nexport const logoutUser = () => {\n  localStorage.removeItem('token');\n  // You might also want to redirect the user to the login page or update auth context.\n  // No API call is strictly necessary for basic JWT logout on the client-side,\n  // unless your backend implements server-side session invalidation.\n};\n\n/**\r\n * Optional: Function to get the current authentication token.\r\n * @returns {string|null} The token or null if not found.\r\n */\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// You might also add a function to get the current user's profile\n// if your backend has an endpoint like /api/auth/me that returns user info based on the token.\n// export const getCurrentUser = async () => {\n//   const token = getToken();\n//   if (!token) return null;\n//   try {\n//     const response = await axios.get(`${API_URL}/me`, {\n//       headers: { Authorization: `Bearer ${token}` }\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error('Failed to fetch current user', error);\n//     logoutUser(); // If token is invalid or expired, log out\n//     return null;\n//   }\n// };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","post","data","token","localStorage","setItem","error","Error","loginUser","credentials","logoutUser","removeItem","getToken","getItem"],"sources":["C:/Users/dhira/OneDrive/Desktop/other/final house rental website/home-rental-app/client/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define the base URL for your API. This might come from an environment variable.\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/auth'; // Adjust port if your backend runs elsewhere\r\n\r\n/**\r\n * Registers a new user.\r\n * @param {object} userData - The user's registration data (e.g., name, email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData);\r\n    // If registration is successful, the backend might return user data and a token.\r\n    // You might want to store the token in localStorage here or in AuthContext.\r\n    if (response.data && response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle errors (e.g., display a message to the user)\r\n    // Axios wraps the error response in error.response\r\n    throw error.response ? error.response.data : new Error('Registration failed');\r\n  }\r\n};\r\n\r\n/**\r\n * Logs in an existing user.\r\n * @param {object} credentials - The user's login credentials (e.g., email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, credentials);\r\n    // If login is successful, the backend will likely return user data and a token.\r\n    // Store the token in localStorage for subsequent authenticated requests.\r\n    if (response.data && response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response ? error.response.data : new Error('Login failed');\r\n  }\r\n};\r\n\r\n/**\r\n * Logs out the current user.\r\n * This typically involves removing the token from local storage.\r\n */\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem('token');\r\n  // You might also want to redirect the user to the login page or update auth context.\r\n  // No API call is strictly necessary for basic JWT logout on the client-side,\r\n  // unless your backend implements server-side session invalidation.\r\n};\r\n\r\n/**\r\n * Optional: Function to get the current authentication token.\r\n * @returns {string|null} The token or null if not found.\r\n */\r\nexport const getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// You might also add a function to get the current user's profile\r\n// if your backend has an endpoint like /api/auth/me that returns user info based on the token.\r\n// export const getCurrentUser = async () => {\r\n//   const token = getToken();\r\n//   if (!token) return null;\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/me`, {\r\n//       headers: { Authorization: `Bearer ${token}` }\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Failed to fetch current user', error);\r\n//     logoutUser(); // If token is invalid or expired, log out\r\n//     return null;\r\n//   }\r\n// };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,gCAAgC,CAAC,CAAC;;AAEnF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,WAAW,EAAEK,QAAQ,CAAC;IAClE;IACA;IACA,IAAIC,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IACpD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA;IACA,MAAMA,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACN,QAAQ,CAACE,IAAI,GAAG,IAAIK,KAAK,CAAC,qBAAqB,CAAC;EAC/E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,QAAQ,EAAEe,WAAW,CAAC;IAClE;IACA;IACA,IAAIT,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IACpD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACN,QAAQ,CAACE,IAAI,GAAG,IAAIK,KAAK,CAAC,cAAc,CAAC;EACxE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,UAAU,GAAGA,CAAA,KAAM;EAC9BN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EAChC;EACA;EACA;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}