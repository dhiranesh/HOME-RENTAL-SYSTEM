{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhira\\\\OneDrive\\\\Desktop\\\\other\\\\final house rental website\\\\home-rental-app\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react'; // Added useContext\nimport { useNavigate } from 'react-router-dom'; // Optional: for programmatic navigation on logout\nimport * as api from '../api/auth'; // Assuming your API functions are here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the AuthContext\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate(); // Optional\n\n  const fetchCurrentUser = useCallback(async currentToken => {\n    if (currentToken) {\n      try {\n        // Use the new getCurrentUser API function\n        const userData = await api.getCurrentUser();\n        if (userData) {\n          setUser(userData);\n          setIsAuthenticated(true);\n        } else {\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch current user or token invalid\", error);\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      setToken(storedToken);\n      // setIsAuthenticated(true); // Basic check, better to verify token with backend\n      fetchCurrentUser(storedToken);\n    } else {\n      setIsLoading(false);\n    }\n  }, [fetchCurrentUser]);\n  const login = async credentials => {\n    try {\n      const data = await api.loginUser(credentials); // api.loginUser should store token in localStorage\n      setUser(data.user); // Assuming API returns { token, user }\n      setToken(data.token);\n      setIsAuthenticated(true);\n      localStorage.setItem('token', data.token); // Ensure token is set\n      return data;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const data = await api.registerUser(userData); // api.registerUser might also store token and log in\n      // Decide if registration should automatically log in the user\n      if (data.token && data.user) {\n        setUser(data.user);\n        setToken(data.token);\n        setIsAuthenticated(true);\n        localStorage.setItem('token', data.token);\n      }\n      return data;\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    api.logoutUser(); // Clears token from localStorage\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    // navigate('/login'); // Optional: redirect to login page\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isAuthenticated,\n      isLoading,\n      login,\n      register,\n      logout,\n      setUser,\n      setIsAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Ctqns50UFQL8nNU8Fq90r/4kiRw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","useNavigate","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","navigate","fetchCurrentUser","currentToken","userData","getCurrentUser","error","console","removeItem","storedToken","login","credentials","data","loginUser","setItem","register","registerUser","logout","logoutUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dhira/OneDrive/Desktop/other/final house rental website/home-rental-app/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback, useContext } from 'react'; // Added useContext\r\nimport { useNavigate } from 'react-router-dom'; // Optional: for programmatic navigation on logout\r\nimport * as api from '../api/auth'; // Assuming your API functions are here\r\n\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate(); // Optional\r\n\r\n  const fetchCurrentUser = useCallback(async (currentToken) => {\r\n    if (currentToken) {\r\n      try {\r\n        // Use the new getCurrentUser API function\r\n        const userData = await api.getCurrentUser();\r\n        if (userData) {\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch current user or token invalid\", error);\r\n        localStorage.removeItem('token');\r\n        setToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n      // setIsAuthenticated(true); // Basic check, better to verify token with backend\r\n      fetchCurrentUser(storedToken);\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [fetchCurrentUser]);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const data = await api.loginUser(credentials); // api.loginUser should store token in localStorage\r\n      setUser(data.user); // Assuming API returns { token, user }\r\n      setToken(data.token);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('token', data.token); // Ensure token is set\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const data = await api.registerUser(userData); // api.registerUser might also store token and log in\r\n       // Decide if registration should automatically log in the user\r\n      if (data.token && data.user) {\r\n        setUser(data.user);\r\n        setToken(data.token);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('token', data.token);\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Registration failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    api.logoutUser(); // Clears token from localStorage\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    // navigate('/login'); // Optional: redirect to login page\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, isAuthenticated, isLoading, login, register, logout, setUser, setIsAuthenticated }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,OAAO,CAAC,CAAC;AAC5F,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAO,KAAKC,GAAG,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,gBAAGT,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMU,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAOP,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAACkB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMwB,QAAQ,GAAGpB,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMqB,gBAAgB,GAAGvB,WAAW,CAAC,MAAOwB,YAAY,IAAK;IAC3D,IAAIA,YAAY,EAAE;MAChB,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,cAAc,CAAC,CAAC;QAC3C,IAAID,QAAQ,EAAE;UACZZ,OAAO,CAACY,QAAQ,CAAC;UACjBN,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLN,OAAO,CAAC,IAAI,CAAC;UACbM,kBAAkB,CAAC,KAAK,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;QACrEX,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;QAChCd,QAAQ,CAAC,IAAI,CAAC;QACdF,OAAO,CAAC,IAAI,CAAC;QACbM,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF;IACAE,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACd,MAAM+B,WAAW,GAAGd,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIa,WAAW,EAAE;MACff,QAAQ,CAACe,WAAW,CAAC;MACrB;MACAP,gBAAgB,CAACO,WAAW,CAAC;IAC/B,CAAC,MAAM;MACLT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACE,gBAAgB,CAAC,CAAC;EAEtB,MAAMQ,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAM9B,GAAG,CAAC+B,SAAS,CAACF,WAAW,CAAC,CAAC,CAAC;MAC/CnB,OAAO,CAACoB,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC;MACpBG,QAAQ,CAACkB,IAAI,CAACnB,KAAK,CAAC;MACpBK,kBAAkB,CAAC,IAAI,CAAC;MACxBH,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACnB,KAAK,CAAC,CAAC,CAAC;MAC3C,OAAOmB,IAAI;IACb,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMS,QAAQ,GAAG,MAAOX,QAAQ,IAAK;IACnC,IAAI;MACF,MAAMQ,IAAI,GAAG,MAAM9B,GAAG,CAACkC,YAAY,CAACZ,QAAQ,CAAC,CAAC,CAAC;MAC9C;MACD,IAAIQ,IAAI,CAACnB,KAAK,IAAImB,IAAI,CAACrB,IAAI,EAAE;QAC3BC,OAAO,CAACoB,IAAI,CAACrB,IAAI,CAAC;QAClBG,QAAQ,CAACkB,IAAI,CAACnB,KAAK,CAAC;QACpBK,kBAAkB,CAAC,IAAI,CAAC;QACxBH,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACnB,KAAK,CAAC;MAC3C;MACA,OAAOmB,IAAI;IACb,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMW,MAAM,GAAGA,CAAA,KAAM;IACnBnC,GAAG,CAACoC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClB1B,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdI,kBAAkB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAAE7B,IAAI;MAAEE,KAAK;MAAEI,eAAe;MAAEE,SAAS;MAAEW,KAAK;MAAEK,QAAQ;MAAEE,MAAM;MAAEzB,OAAO;MAAEM;IAAmB,CAAE;IAAAT,QAAA,EAC5HA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClC,GAAA,CArFWF,YAAY;EAAA,QAKNP,WAAW;AAAA;AAAA4C,EAAA,GALjBrC,YAAY;AAuFzB,eAAeH,WAAW;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}