{"ast":null,"code":"import axios from'axios';// Define the base URL for your API. This might come from an environment variable.\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api/auth';// Adjust port if your backend runs elsewhere\n/**\r\n * Registers a new user.\r\n * @param {object} userData - The user's registration data (e.g., name, email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */export const registerUser=async userData=>{try{const response=await axios.post(\"\".concat(API_URL,\"/register\"),userData);// If registration is successful, the backend might return user data and a token.\n// You might want to store the token in localStorage here or in AuthContext.\nif(response.data&&response.data.token){localStorage.setItem('token',response.data.token);}return response.data;}catch(error){// Handle errors (e.g., display a message to the user)\n// Axios wraps the error response in error.response\nthrow error.response?error.response.data:new Error('Registration failed');}};/**\r\n * Logs in an existing user.\r\n * @param {object} credentials - The user's login credentials (e.g., email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */export const loginUser=async credentials=>{try{const response=await axios.post(\"\".concat(API_URL,\"/login\"),credentials);// If login is successful, the backend will likely return user data and a token.\n// Store the token in localStorage for subsequent authenticated requests.\nif(response.data&&response.data.token){localStorage.setItem('token',response.data.token);}return response.data;}catch(error){throw error.response?error.response.data:new Error('Login failed');}};/**\r\n * Logs out the current user.\r\n * This typically involves removing the token from local storage.\r\n */export const logoutUser=()=>{localStorage.removeItem('token');// You might also want to redirect the user to the login page or update auth context.\n// No API call is strictly necessary for basic JWT logout on the client-side,\n// unless your backend implements server-side session invalidation.\n};/**\r\n * Optional: Function to get the current authentication token.\r\n * @returns {string|null} The token or null if not found.\r\n */export const getToken=()=>{return localStorage.getItem('token');};// You might also add a function to get the current user's profile\n// if your backend has an endpoint like /api/auth/me that returns user info based on the token.\n// export const getCurrentUser = async () => {\n//   const token = getToken();\n//   if (!token) return null;\n//   try {\n//     const response = await axios.get(`${API_URL}/me`, {\n//       headers: { Authorization: `Bearer ${token}` }\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error('Failed to fetch current user', error);\n//     logoutUser(); // If token is invalid or expired, log out\n//     return null;\n//   }\n// };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","post","concat","data","token","localStorage","setItem","error","Error","loginUser","credentials","logoutUser","removeItem","getToken","getItem"],"sources":["C:/Users/dhira/OneDrive/Desktop/other/final house rental website/home-rental-app/client/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define the base URL for your API. This might come from an environment variable.\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/auth'; // Adjust port if your backend runs elsewhere\r\n\r\n/**\r\n * Registers a new user.\r\n * @param {object} userData - The user's registration data (e.g., name, email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData);\r\n    // If registration is successful, the backend might return user data and a token.\r\n    // You might want to store the token in localStorage here or in AuthContext.\r\n    if (response.data && response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle errors (e.g., display a message to the user)\r\n    // Axios wraps the error response in error.response\r\n    throw error.response ? error.response.data : new Error('Registration failed');\r\n  }\r\n};\r\n\r\n/**\r\n * Logs in an existing user.\r\n * @param {object} credentials - The user's login credentials (e.g., email, password).\r\n * @returns {Promise<object>} The server's response.\r\n */\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, credentials);\r\n    // If login is successful, the backend will likely return user data and a token.\r\n    // Store the token in localStorage for subsequent authenticated requests.\r\n    if (response.data && response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response ? error.response.data : new Error('Login failed');\r\n  }\r\n};\r\n\r\n/**\r\n * Logs out the current user.\r\n * This typically involves removing the token from local storage.\r\n */\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem('token');\r\n  // You might also want to redirect the user to the login page or update auth context.\r\n  // No API call is strictly necessary for basic JWT logout on the client-side,\r\n  // unless your backend implements server-side session invalidation.\r\n};\r\n\r\n/**\r\n * Optional: Function to get the current authentication token.\r\n * @returns {string|null} The token or null if not found.\r\n */\r\nexport const getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// You might also add a function to get the current user's profile\r\n// if your backend has an endpoint like /api/auth/me that returns user info based on the token.\r\n// export const getCurrentUser = async () => {\r\n//   const token = getToken();\r\n//   if (!token) return null;\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/me`, {\r\n//       headers: { Authorization: `Bearer ${token}` }\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Failed to fetch current user', error);\r\n//     logoutUser(); // If token is invalid or expired, log out\r\n//     return null;\r\n//   }\r\n// };\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,gCAAgC,CAAE;AAEnF;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,IAAI,IAAAC,MAAA,CAAIR,OAAO,cAAaK,QAAQ,CAAC,CAClE;AACA;AACA,GAAIC,QAAQ,CAACG,IAAI,EAAIH,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAE,CACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEN,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC,CACpD,CACA,MAAO,CAAAJ,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOI,KAAK,CAAE,CACd;AACA;AACA,KAAM,CAAAA,KAAK,CAACP,QAAQ,CAAGO,KAAK,CAACP,QAAQ,CAACG,IAAI,CAAG,GAAI,CAAAK,KAAK,CAAC,qBAAqB,CAAC,CAC/E,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,SAAS,CAAG,KAAO,CAAAC,WAAW,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAP,KAAK,CAACQ,IAAI,IAAAC,MAAA,CAAIR,OAAO,WAAUgB,WAAW,CAAC,CAClE;AACA;AACA,GAAIV,QAAQ,CAACG,IAAI,EAAIH,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAE,CACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEN,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC,CACpD,CACA,MAAO,CAAAJ,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CAACP,QAAQ,CAAGO,KAAK,CAACP,QAAQ,CAACG,IAAI,CAAG,GAAI,CAAAK,KAAK,CAAC,cAAc,CAAC,CACxE,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,UAAU,CAAGA,CAAA,GAAM,CAC9BN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC,CAChC;AACA;AACA;AACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CAC5B,MAAO,CAAAR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC,CACtC,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}