{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(()=>{const storedTheme=localStorage.getItem('theme');return storedTheme||'light';// Default to light theme if nothing is stored\n});useEffect(()=>{localStorage.setItem('theme',theme);document.body.className='';// Clear existing theme classes\ndocument.body.classList.add(theme);// Add current theme class (e.g., 'light' or 'dark')\n},[theme]);const toggleTheme=()=>{setTheme(prevTheme=>prevTheme==='light'?'dark':'light');};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};export default ThemeContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","theme","setTheme","storedTheme","localStorage","getItem","setItem","document","body","className","classList","add","toggleTheme","prevTheme","Provider","value","useTheme","context","undefined","Error"],"sources":["C:/Users/dhira/OneDrive/Desktop/other/final house rental website/home-rental-app/client/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState(() => {\r\n    const storedTheme = localStorage.getItem('theme');\r\n    return storedTheme || 'light'; // Default to light theme if nothing is stored\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', theme);\r\n    document.body.className = ''; // Clear existing theme classes\r\n    document.body.classList.add(theme); // Add current theme class (e.g., 'light' or 'dark')\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default ThemeContext;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAO,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAC,IAAM,CACvC,KAAM,CAAAW,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACjD,MAAO,CAAAF,WAAW,EAAI,OAAO,CAAE;AACjC,CAAC,CAAC,CAEFV,SAAS,CAAC,IAAM,CACdW,YAAY,CAACE,OAAO,CAAC,OAAO,CAAEL,KAAK,CAAC,CACpCM,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAG,EAAE,CAAE;AAC9BF,QAAQ,CAACC,IAAI,CAACE,SAAS,CAACC,GAAG,CAACV,KAAK,CAAC,CAAE;AACtC,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAW,WAAW,CAAGA,CAAA,GAAM,CACxBV,QAAQ,CAAEW,SAAS,EAAMA,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CACrE,CAAC,CAED,mBACEjB,IAAA,CAACC,YAAY,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEd,KAAK,CAAEW,WAAY,CAAE,CAAAZ,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAAgB,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGvB,UAAU,CAACG,YAAY,CAAC,CACxC,GAAIoB,OAAO,GAAKC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAF,OAAO,CAChB,CAAC,CAED,cAAe,CAAApB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}