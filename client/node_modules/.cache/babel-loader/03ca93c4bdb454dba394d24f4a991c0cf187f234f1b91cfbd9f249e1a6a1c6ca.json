{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhira\\\\OneDrive\\\\Desktop\\\\other\\\\final house rental website\\\\home-rental-app\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react'; // Added useContext\nimport { useNavigate } from 'react-router-dom'; // Optional: for programmatic navigation on logout\nimport * as api from '../api/auth'; // Assuming your API functions are here\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the AuthContext\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// New component to handle navigation context\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthNavigator = ({\n  children\n}) => {\n  _s2();\n  const navigate = useNavigate(); // This is now safe\n  const authContext = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s2(AuthNavigator, \"NlaQLX0uzD45Nt49Ox2YUMXadHs=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthNavigator;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s3();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const fetchCurrentUser = useCallback(async currentToken => {\n    if (currentToken) {\n      try {\n        // Use the new getCurrentUser API function\n        const userData = await api.getCurrentUser();\n        if (userData) {\n          setUser(userData);\n          setIsAuthenticated(true);\n        } else {\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch current user or token invalid\", error);\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      setToken(storedToken);\n      // setIsAuthenticated(true); // Basic check, better to verify token with backend\n      fetchCurrentUser(storedToken);\n    } else {\n      setIsLoading(false);\n    }\n  }, [fetchCurrentUser]);\n  const login = async credentials => {\n    try {\n      const data = await api.loginUser(credentials); // api.loginUser should store token in localStorage\n      setUser(data.user); // Assuming API returns { token, user }\n      setToken(data.token);\n      setIsAuthenticated(true);\n      localStorage.setItem('token', data.token); // Ensure token is set\n      return data;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const data = await api.registerUser(userData); // api.registerUser might also store token and log in\n      // Decide if registration should automatically log in the user\n      if (data.token && data.user) {\n        setUser(data.user);\n        setToken(data.token);\n        setIsAuthenticated(true);\n        localStorage.setItem('token', data.token);\n      }\n      return data;\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    api.logoutUser(); // Clears token from localStorage\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    // Navigation is typically handled by the component calling logout,\n    // or you could pass navigate to logout: logout(navigate)\n    // navigate('/login'); // This would need navigate instance\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isAuthenticated,\n      isLoading,\n      login,\n      register,\n      logout,\n      setUser,\n      setIsAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s3(AuthProvider, \"EijqrgFgLiEYjtpj1v0Ll5ZhQhs=\");\n_c2 = AuthProvider;\nexport default AuthContext;\n\n// It's often cleaner to have components that use router hooks be separate\n// and rendered inside the Router. If AuthProvider needs to perform navigation,\n// it implies it has routing concerns.\n\n// Simpler fix for the reported error:\n// Ensure AuthProvider's direct call to useNavigate is removed.\n// If navigate is used by logout, logout should be callable with navigate instance.\n// Example: const handleLogout = () => { auth.logout(navigate); } in a component.\n// The provided AuthNavigator is a pattern if AuthProvider *itself* needed to orchestrate navigation\n// based on auth changes directly within its own definition, which is less common for a provider.\n// The error is from useNavigate() being at the top level of AuthProvider when AuthProvider is outside Router.\n// The simplest way is to ensure useNavigate is called by a component *rendered by* AuthProvider *inside* Router.\n// The current structure of App.js already does this for child components.\n// The issue was `const navigate = useNavigate()` at the top of `AuthProvider` itself.\n\n// Corrected AuthProvider without direct navigation, assuming navigation is handled by consumers or passed to methods:\n// (Re-stating the AuthProvider part of the fix for clarity if the above AuthNavigator is not used)\n// The key change is removing `const navigate = useNavigate()` from the immediate scope of AuthProvider\n// if AuthProvider is instantiated outside Router.\n\n// The original fix attempt for AuthProvider:\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [token, setToken] = useState(localStorage.getItem('token'));\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [isLoading, setIsLoading] = useState(true);\n//   // const navigate = useNavigate(); // THIS LINE WAS THE ISSUE\n\n//   // ... rest of AuthProvider\n//   // The logout function, if it uses navigate, must get it from its caller\n//   // or be structured differently.\n\n//   const logout = (navigateInstance) => { // navigateInstance is optional, passed by caller\n//     api.logoutUser();\n//     setUser(null);\n//     setToken(null);\n//     setIsAuthenticated(false);\n//     if (navigateInstance) navigateInstance('/login');\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, token, isAuthenticated, isLoading, login, register, logout, setUser, setIsAuthenticated }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n// The above commented section is a conceptual restatement. The primary fix is removing the problematic useNavigate call.\n// The existing AuthProvider in the codebase has `const navigate = useNavigate()`\n// This needs to be removed or AuthProvider needs to be structured to be instantiated inside Router,\n// or the component calling useNavigate needs to be inside Router.\n\n// Let's ensure the `useNavigate` call is properly scoped.\n// The simplest change is to remove `const navigate = useNavigate()` from `AuthProvider`\n// and ensure any navigation is done by components that are children of `<Router>`.\n// If `logout` in `AuthProvider` needs to navigate, it should accept `navigate` as a parameter.\n\n// Final proposed change for AuthContext.js (minimal change to fix the error):\n// Remove `const navigate = useNavigate();` from AuthProvider.\n// Modify `logout` to optionally accept `navigate`.\n// This is the most direct fix for the error message.\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthNavigator\");\n$RefreshReg$(_c2, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","useNavigate","api","Fragment","_Fragment","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthNavigator","children","_s2","navigate","authContext","_c","AuthProvider","_s3","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","fetchCurrentUser","currentToken","userData","getCurrentUser","error","console","removeItem","storedToken","login","credentials","data","loginUser","setItem","register","registerUser","logout","logoutUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/dhira/OneDrive/Desktop/other/final house rental website/home-rental-app/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback, useContext } from 'react'; // Added useContext\r\nimport { useNavigate } from 'react-router-dom'; // Optional: for programmatic navigation on logout\r\nimport * as api from '../api/auth'; // Assuming your API functions are here\r\n\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\n// New component to handle navigation context\r\nconst AuthNavigator = ({ children }) => {\r\n  const navigate = useNavigate(); // This is now safe\r\n  const authContext = useContext(AuthContext);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const fetchCurrentUser = useCallback(async (currentToken) => {\r\n    if (currentToken) {\r\n      try {\r\n        // Use the new getCurrentUser API function\r\n        const userData = await api.getCurrentUser();\r\n        if (userData) {\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          setUser(null);\r\n          setIsAuthenticated(false);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch current user or token invalid\", error);\r\n        localStorage.removeItem('token');\r\n        setToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n      // setIsAuthenticated(true); // Basic check, better to verify token with backend\r\n      fetchCurrentUser(storedToken);\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [fetchCurrentUser]);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const data = await api.loginUser(credentials); // api.loginUser should store token in localStorage\r\n      setUser(data.user); // Assuming API returns { token, user }\r\n      setToken(data.token);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('token', data.token); // Ensure token is set\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const data = await api.registerUser(userData); // api.registerUser might also store token and log in\r\n       // Decide if registration should automatically log in the user\r\n      if (data.token && data.user) {\r\n        setUser(data.user);\r\n        setToken(data.token);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('token', data.token);\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Registration failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    api.logoutUser(); // Clears token from localStorage\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    // Navigation is typically handled by the component calling logout,\r\n    // or you could pass navigate to logout: logout(navigate)\r\n    // navigate('/login'); // This would need navigate instance\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, isAuthenticated, isLoading, login, register, logout, setUser, setIsAuthenticated }}>\r\n      {/* Wrap children with AuthNavigator if direct navigation from AuthProvider is needed */}\r\n      {/* For the current error, the main fix is that useNavigate is called by a component *inside* Router */}\r\n      {/* If AuthProvider itself doesn't navigate, but its consumers do, this structure is fine. */}\r\n      {/* If logout in THIS file needs to navigate, it must be refactored or navigate passed to it. */}\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n\r\n// It's often cleaner to have components that use router hooks be separate\r\n// and rendered inside the Router. If AuthProvider needs to perform navigation,\r\n// it implies it has routing concerns.\r\n\r\n// Simpler fix for the reported error:\r\n// Ensure AuthProvider's direct call to useNavigate is removed.\r\n// If navigate is used by logout, logout should be callable with navigate instance.\r\n// Example: const handleLogout = () => { auth.logout(navigate); } in a component.\r\n// The provided AuthNavigator is a pattern if AuthProvider *itself* needed to orchestrate navigation\r\n// based on auth changes directly within its own definition, which is less common for a provider.\r\n// The error is from useNavigate() being at the top level of AuthProvider when AuthProvider is outside Router.\r\n// The simplest way is to ensure useNavigate is called by a component *rendered by* AuthProvider *inside* Router.\r\n// The current structure of App.js already does this for child components.\r\n// The issue was `const navigate = useNavigate()` at the top of `AuthProvider` itself.\r\n\r\n// Corrected AuthProvider without direct navigation, assuming navigation is handled by consumers or passed to methods:\r\n// (Re-stating the AuthProvider part of the fix for clarity if the above AuthNavigator is not used)\r\n// The key change is removing `const navigate = useNavigate()` from the immediate scope of AuthProvider\r\n// if AuthProvider is instantiated outside Router.\r\n\r\n// The original fix attempt for AuthProvider:\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [token, setToken] = useState(localStorage.getItem('token'));\r\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n//   // const navigate = useNavigate(); // THIS LINE WAS THE ISSUE\r\n\r\n//   // ... rest of AuthProvider\r\n//   // The logout function, if it uses navigate, must get it from its caller\r\n//   // or be structured differently.\r\n\r\n//   const logout = (navigateInstance) => { // navigateInstance is optional, passed by caller\r\n//     api.logoutUser();\r\n//     setUser(null);\r\n//     setToken(null);\r\n//     setIsAuthenticated(false);\r\n//     if (navigateInstance) navigateInstance('/login');\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, token, isAuthenticated, isLoading, login, register, logout, setUser, setIsAuthenticated }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n// The above commented section is a conceptual restatement. The primary fix is removing the problematic useNavigate call.\r\n// The existing AuthProvider in the codebase has `const navigate = useNavigate()`\r\n// This needs to be removed or AuthProvider needs to be structured to be instantiated inside Router,\r\n// or the component calling useNavigate needs to be inside Router.\r\n\r\n// Let's ensure the `useNavigate` call is properly scoped.\r\n// The simplest change is to remove `const navigate = useNavigate()` from `AuthProvider`\r\n// and ensure any navigation is done by components that are children of `<Router>`.\r\n// If `logout` in `AuthProvider` needs to navigate, it should accept `navigate` as a parameter.\r\n\r\n// Final proposed change for AuthContext.js (minimal change to fix the error):\r\n// Remove `const navigate = useNavigate();` from AuthProvider.\r\n// Modify `logout` to optionally accept `navigate`.\r\n// This is the most direct fix for the error message.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}